generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI") 
}

//Enums
enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

enum DockerStatus {
  REBOOTING
  CREATING
  ACTIVE
  INACTIVE
}

enum LogType {
  CRITICAL
  ERROR
  WARNING
  INFO
}

enum VpsStatus {
  ONLINE
  OFFLINE
}

enum Coins {
  BTC
  LTC
}

//Types
type Wallet {
  address String
  coin Coins
}

//Models
model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  password String
  status   AdminStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Docker {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String @unique
  vpsId          String @db.ObjectId
  port           Int
  status         DockerStatus @default(INACTIVE)
  tcpConnections Int    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@unique([vpsId, port])

  VPS VPS @relation(fields: [vpsId], references: [id])
}

model AdminApiLog {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  logType LogType
  message String
  data    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pool {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  port    Int
  domain  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  settings Settings @relation(fields: [settingsId], references: [id])
  settingsId String @db.ObjectId

  miningAccounts MiningAccount[]
}

model VPS {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  ip      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status  VpsStatus @default(OFFLINE)

  settings Settings @relation(fields: [settingsId], references: [id])
  settingsId String @db.ObjectId

  Dockers Docker[]
}

model Settings {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  pools                  Pool[] 
  VPSs                    VPS[]          
  defaultMaxPhPerMiningAccountBtc Float
  hashrateMultiplicationFactorBtc Int
  defaultMaxPhPerMiningAccountLtc Float
  hashrateMultiplicationFactorLtc Int
  defaultInitialDifficultyBtc Int
  defaultInitialDifficultyLtc Int
  dockerPortRangeStart    Int
  dockerPortRangeEnd      Int
  dockerCliTcpPort        Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Client {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  username String @unique
  password String
  status   ClientStatus @default(ACTIVE)
  publicIps String[]
  name    String
  workerName String
  workerPassword String

  miningAccounts MiningAccount[]
}

model Proxy {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  entryPoint String
  ip String
  port Int
  countryCode String

  miningAccounts MiningAccount[]

  @@unique([ip, port, entryPoint])
}

model MiningAccount {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  note String
  code String @unique
  coin Coins
  hashrateLimitPh Int
  hashratePerMachineTh Int
  multiplicationFactor Int
  wallets Wallet[]
  inDiff Int

  client Client @relation(fields: [clientId], references: [id])
  clientId String @db.ObjectId
  workerName String @unique
  pool Pool @relation(fields: [poolId], references: [id])
  poolId String @db.ObjectId
  proxy Proxy @relation(fields: [proxyId], references: [id])
  proxyId String @db.ObjectId
}
